#!/usr/lib/python3 python
# -*- coding: utf-8 -*-
import os
import sys
import config
import db
import random
import datetime
import vk_api
import telebot
import threading
import urllib.request as ur
from PIL import Image # –î–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ webp –≤ PNG

config.initConfig()

module = sys.modules[__name__]

# –ö–æ–¥ –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —á–∏—Ç–∞—Ç—å —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö!

#    _______        _     
#   |__   __|      | |    
#      | | ___  ___| |__  
#      | |/ _ \/ __| '_ \ 
#      | |  __/ (__| | | |
#      |_|\___|\___|_| |_|
#                         
#   –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
def current_time():
	delta = datetime.timedelta( hours=3 )
	utc = datetime.timezone.utc
	fmt = '%H:%M:%S'
	time = ( datetime.datetime.now(utc) + delta )
	timestr = time.strftime(fmt)
	return timestr

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def getUserName( msg ):
	# –î–ª—è –ø—Ä–∏—ë–º–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–≥–¥–∞ –ø–∏—à—É—Ç —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É
	if ( int( msg.get('from_id') ) < 0 ):
		return None
	else:
		dataname = module.vk.users.get( user_ids = msg.get('from_id') )
		name = str ( dataname[0]['first_name'] + ' ' + dataname[0]['last_name'] )
	return name

def getUserTName( msg ):
	if msg.last_name is None:
		userName = str( msg.first_name )
	else:
		userName = str( msg.first_name + " " + msg.last_name )
	return userName

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ç–∞—á–º–µ–Ω—Ç–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
def checkAttachments( msg, idd ):
	if not( msg.get( 'attachments' ) ):
		return False
	transferAttachmentsToTelegram( idd, getAttachments( msg ) )
	return True

# –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ç–∞—á–º–µ–Ω—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –í–ö
def getAttachments( msg ):

	attachList = []

	for att in msg['attachments'][0:]:

		attType = att.get( 'type' )

		attachment = att[attType]

		if attType == 'photo': # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

			for photoType in attachment.get('sizes')[0:]:
				if photoType.get('type') == 'x': # <=604x604
					attachments = photoType.get('url')
				if photoType.get('type') == 'y': # >605x605
					attachments = photoType.get('url')
				if photoType.get('type') == 'z': # <=1280x720
					attachments = photoType.get('url')
				if photoType.get('type') == 'w':# >1280x720
					attachments = photoType.get('url') # <=2560x1440
					attType = 'other'

		elif attType == 'doc': # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:
		# –ü—Ä–æ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç—É—Ç: https://vk.com/dev/objects/doc
			docType = attachment.get( 'type' )
			if docType != 3 and docType != 4 and docType != 5:
				attType = 'other'
			if attachment.get( 'url' ):
				attachments = attachment.get( 'url' )

		elif attType == 'sticker': # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã:
			for sticker in attachment.get( 'images' )[0:]:
				# –ú–æ–∂–Ω–æ 256 –∏–ª–∏ 512, –Ω–æ –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –æ–≥—Ä–æ–º–Ω–∞—è –ø–∏–∫—á–∞
				if sticker.get('width') == 128:
					attachments = sticker.get( 'url' )

		elif attType == 'audio':
			attachments = str ( 'ùÖ† ' + attachment.get('artist') + ' - ' + 
				attachment.get('title') + ' ùÖ†' )
			attType = 'other'

		elif attType == 'audio_message':
			attachments = attachment.get('link_ogg')

		elif attType == 'video':

			ownerId = str( attachment.get( 'owner_id' ) )
			videoId = str( attachment.get( 'id' ) )
			accesskey = str( attachment.get( 'access_key' ) )

			fullURL = str( ownerId + '_' + videoId + '_' + accesskey)

			attachments = module.vk.video.get(videos = fullURL )['items'][0].get('player')

		elif attType == 'graffiti':
			attType = 'other'
			attachments = attachment.get('url')
			
		elif attType == 'link':
			attType = 'other'
			attachments = attachment.get('url')

		elif attType == 'wall':
			attType = 'other'
			attachments = 'https://vk.com/wall'
			from_id = str(attachment.get('from_id'))
			post_id = str(attachment.get('id'))
			attachments += from_id + '_' + post_id

		elif attType == 'wall_reply':
			attType = 'other'
			attachments = 'https://vk.com/wall'
			owner_id = str(attachment.get('owner_id'))
			reply_id = str(attachment.get('id'))
			post_id = str(attachment.get('post_id'))
			attachments += owner_id + '_' + post_id 
			attachments += '?reply=' + reply_id
			
		elif attType == 'poll':
			attType = 'other'
			attachments = 'https://vk.com/poll'
			owner_id = str(attachment.get('owner_id'))
			poll_id = str(attachment.get('id'))
			attachments += owner_id + '_' + poll_id
		# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø?
		else:

			attachments = None

		attachList.append( {    'type':attType,
								'link':attachments } )

	#print( attachList )

	return attachList

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞ –í–ö –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
def checkEvents( msg, chatid ):

	if not ( msg['last_message'].get( 'action' ) ):
		return None # –ò —Ç–∞–∫ —Å–æ–π–¥—ë—Ç

	event = msg['last_message']['action'].get( 'type' )
	userName = getUserName( msg['last_message'] )

	# –ù–∏–∂–µ –ø—Ä–æ–≤–µ—Ä—è–º –Ω–∞—à —á–∞—Ç –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
	# –°–º. https://vk.com/dev/objects/message

	if event == 'chat_title_update':
		eObject = str( msg['last_message']['action'].get( 'text' ) )
		mbody = " *** " + userName + " –∏–∑–º–µ–Ω–∏–ª(–∞) –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã –Ω–∞ " + eObject + " ***"

	elif event == 'chat_invite_user':
		dataname = module.vk.users.get( user_ids = msg['last_message']['action'].get( 'member_id' ) )
		eObject = str ( dataname[0]['first_name'] + ' ' + dataname[0]['last_name'] )
		mbody = " *** " + userName + " –ø—Ä–∏–≥–ª–∞—Å–∏–ª(–∞) –≤ –±–µ—Å–µ–¥—É " + eObject + " ***"

	elif event == 'chat_kick_user':
		dataname = module.vk.users.get( user_ids = msg['last_message']['action'].get( 'member_id' ) )
		eObject = str ( dataname[0]['first_name'] + ' ' + dataname[0]['last_name'] )
		mbody = " *** " + userName + " –∫–∏–∫–Ω—É–ª(–∞) –∏–∑ –±–µ—Å–µ–¥—ã " + eObject + " ***"

	elif event == 'chat_photo_update':
		mbody = " *** " + userName + " –æ–±–Ω–æ–≤–∏–ª(–∞) —Ñ–æ—Ç–æ –±–µ—Å–µ–¥—ã: ***"

	elif event == 'chat_photo_remove':
		mbody = " *** " + userName + " —É–¥–∞–ª–∏–ª(–∞) —Ñ–æ—Ç–æ –±–µ—Å–µ–¥—ã! ***"

	elif event == 'chat_pin_message':
		eObject = str( msg['last_message']['action'].get( 'message' ) )
		if( eObject ):
			mbody = " *** " + userName + " –∑–∞–∫—Ä–µ–ø–∏–ª(–∞): " + eObject + " ***"
		else:
			mbody = " *** " + userName + " –∑–∞–∫—Ä–µ–ø–∏–ª(–∞) —Å–æ–æ–±—â–µ–Ω–∏–µ! ***"

	elif event == 'chat_unpin_message':
		mbody = " *** " + userName + " –æ—Ç–∫—Ä–µ–ø–∏–ª(–∞) —Å–æ–æ–±—â–µ–Ω–∏–µ! ***"

	elif event == 'chat_create':
		print( '–ë–µ—Å–µ–¥–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!' )

	else:
		return None

	transferMessagesToTelegram( chatid, None, mbody, None )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ—à–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def getFwdMessages( msg, idd ):

	if not( msg.get( 'fwd_messages' ) ):
		return None # –ò —Ç–∞–∫ —Å–æ–π–¥—ë—Ç

	fwdList = []
	fwdMsg = msg.get( 'fwd_messages' )

	while not fwdMsg is None:

		userName = getUserName( fwdMsg[0] )

		fwdList.append( { 'body':fwdMsg[0].get( 'text' ), 'userName':userName } )

		checkAttachments( fwdMsg[0], idd )

		fwdMsg = fwdMsg[0].get( 'fwd_messages' )

	#print( fwdList )

	return fwdList

#    _____          _ _               _       
#   |  __ \        | (_)             | |      
#   | |__) |___  __| |_ _ __ ___  ___| |_ ___ 
#   |  _  // _ \/ _` | | '__/ _ \/ __| __/ __|
#   | | \ \  __/ (_| | | | |  __/ (__| |_\__ \
#   |_|  \_\___|\__,_|_|_|  \___|\___|\__|___/
#                                             
#  –§—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –í–ö <==> Telegram

def checkRedirect_vk( msg ):

	chatid = str( msg['conversation']['peer']['local_id'] )

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
	if not config.getCell( "vk_" + chatid ) is None:

		forwardMessage = getFwdMessages( msg['last_message'], chatid )

		userName = getUserName( msg['last_message'] )
		mbody = msg['last_message'].get( 'text' )

		# –ß—Ç–æ–±—ã –ø—Ä–∏ —Å–æ–±—ã—Ç–∏–∏ –Ω–µ –ø–æ—Å—ã–ª–∞–ª–æ—Å—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		if checkEvents( msg, chatid ) is None:
			transferMessagesToTelegram( chatid, userName, mbody, forwardMessage )

		# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ç—Ç–∞—á–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∏–¥–µ–æ...
		# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–¥–µ–ª–∞–Ω–∞, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏
		if forwardMessage is None:
			checkAttachments( msg['last_message'], chatid )

		return True
	return False



def transferMessageToVK( chatid, text, fromUser, attachment ):

	if ( config.getCell('telegram_SendName') ):
		time = current_time()
		text = str( time + ' | ' + fromUser + ': ' + text )

	randid = random.randint(-9223372036854775808, +9223372036854775807) #int64

	if attachment is None:

		try:
			module.vk.messages.send( chat_id = config.getCell( 't_' + chatid ), message = text, random_id=randid )
		except vk_api.ApiError as error_msg:
			module.vk.messages.send( user_id = config.getCell( 't_' + chatid ), message = text, random_id=randid )
		#print( '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ( ' + text + ' )' )

	else:

		getSticker = db.checkSticker( attachment )

		# –ï—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î
		if getSticker is None:
			stickerURL = 'https://api.telegram.org/file/bot{0}/{1}'.format( config.getCell( 'telegram_token' ), attachment )
			saveSticker( stickerURL, attachment )
			getSticker = db.checkSticker( attachment )

		#print( getSticker )

		try:
			module.vk.messages.send( chat_id = config.getCell( 't_' + chatid ), message = "", attachment = getSticker, random_id=randid )
		except vk_api.ApiError as error_msg:
			module.vk.messages.send( user_id = config.getCell( 't_' + chatid ), message = "", attachment = getSticker, random_id=randid )

	return False

def checkRedirect_telegram( chatid, text, fromUser, attachment ):
	if not config.getCell( 't_' + chatid ) is None:
		transferMessageToVK( chatid, text, fromUser, attachment )
		return False

# –ü–æ—Å—ã–ª–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
# –ò–¥–µ—è: —Å–¥–µ–ª–∞—Ç—å –≤ –±—É–¥—É—â–µ–º –Ω–∞–∫–ª–æ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±–∏–∫–∏, —Ç–µ–ø–µ—Ä—å –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—ã—Ç—å
def transferMessagesToTelegram( idd, userName, mbody, fwdList ):

	# –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Å–æ–±—ã—Ç–∏—è
	if userName is None:
		if mbody:
			module.bot.send_message( config.getCell( 'vk_' + idd ), str( mbody ) )
		return False

	time = current_time()
	niceText = str( time + ' | ' + userName + ': ' + mbody )

	if not fwdList is None:

		forwardText = ''

		for f in fwdList[0:]:
			forwardText = forwardText + str( ' | ' + f.get( 'userName' ) + ':' + ' ' + f.get( 'body' ) + ' \n\n' )

		module.bot.send_message( config.getCell( 'vk_' + idd ), niceText + '\n\n' + forwardText )

	else:
		module.bot.send_message( config.getCell( 'vk_' + idd ), niceText )

# –ü–æ—Å—ã–ª–∞–µ–º –∞—Ç—Ç–∞—á–º–µ–Ω—Ç—ã –≤ Telegram
def transferAttachmentsToTelegram ( idd, attachments ):

	for j in attachments[0:]:

		attType = j.get( 'type' )
		link = j.get( 'link' )

		if attType == 'photo' or attType == 'sticker':
			module.bot.send_photo( config.getCell( 'vk_' + idd ), link )

		elif attType == 'doc' or attType == 'gif' or attType == 'audio_message':
			module.bot.send_document( config.getCell( 'vk_' + idd ), link )

		elif attType == 'other':
			module.bot.send_message( config.getCell( 'vk_' + idd ), link )

		elif attType == 'video':

			# –ü–æ—Ç–æ–º—É —á—Ç–æ –≤ –í–ö –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤–∏–¥–µ–æ -_-
			module.bot.send_message( config.getCell( 'vk_' + idd ), link )

		else:
			module.bot.send_message( config.getCell( 'vk_' + idd ), '( –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—Ç—Ç–∞—á–º–µ–Ω—Ç–∞ )' )

#   __      ___    
#   \ \    / / |   
#    \ \  / /| | __
#     \ \/ / | |/ /
#      \  /  |   < 
#       \/   |_|\_\
#                  
#

# –ü—Ä–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
def auth_handler():

	key = input("Enter authentication code: ")
	# True - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, False - –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
	remember_device = True

	return key, remember_device

# –ö–∞–ø—Ç—á–∞
def captcha_handler( captcha ):
	key = input( "Enter Captcha {0}: ".format( captcha.get_url() ) ).strip()
	return captcha.try_again(key)

def init_vk():

	login = config.getCell( 'vk_login' )
	password = config.getCell( 'vk_password' )
	app = config.getCell( 'app_id' )

	print( "login in vk as: " + login )

	global vk_session

	vk_session = vk_api.VkApi( token ="–í–∞—à–¢–æ–∫–µ–Ω", auth_handler=auth_handler, captcha_handler=captcha_handler )
	##–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–∞–µ–º —Ç—É—Ç https://oauth.vk.com/oauth/authorize?client_id=6121396&scope=65540&redirect_uri=https://oauth.vk.com/blank.html&display=page&response_type=token&revoke=1&slogin_h=bb8b87cb8445413e88.ff716286cf4a96b99b&__q_hash=bad77743e35cc378cc32e42b66c126f2
	try:
		vk_session.auth()
	except vk_api.AuthError as error_msg:
		print( error_msg )

	module.vk = vk_session.get_api() # –í–∞–∂–Ω–∞—è —à—Ç—É–∫–∞

	input_vk()

def input_vk():
	
	while True:

		try:
			#–°—Ç–∞–≤–∏–º –æ–Ω–ª–∞–π–Ω –±–æ—Ç—É, —á–æ–º—É –±—ã –∏ –Ω–µ—Ç?
			module.vk.account.setOnline()

			# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
			if ( config.getCell('vk_AddFriends') ):
				checknewfriends()

			rawMessages = module.vk.messages.getConversations( filter='unread', count=config.getCell('vk_msgForPick') )['items']
			if not rawMessages:
				continue
			
			msg = rawMessages[0]['conversation']['peer']
			if checkRedirect_vk( rawMessages[0] ) or config.getCell('vk_markAsReadEverything'):
				module.vk.messages.markAsRead( messages_ids = msg['local_id'], peer_id = msg['id'] )


		# –ß—Ç–æ–±—ã –Ω–µ –≤—ã–ª–µ—Ç–∞–ª–æ, –∞ —Ä–∞–±–æ—Ç–∞–ª–æ –¥–∞–ª—å—à–µ
		except BaseException as e:
			print(e)
			print( '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...' )
			continue


#    _______   _                                
#   |__   __| | |                               
#      | | ___| | ___  __ _ _ __ __ _ _ __ ___  
#      | |/ _ \ |/ _ \/ _` | '__/ _` | '_ ` _ \ 
#      | |  __/ |  __/ (_| | | | (_| | | | | | |
#      |_|\___|_|\___|\__, |_|  \__,_|_| |_| |_|
#                      __/ |                    
#                     |___/                     


def listener( messages ):
	for m in messages:

		if m.content_type == 'text':

			# –ù–∞ –∫–æ–º–∞–Ω–¥—É '–î–∞–π ID' –∫–∏–¥–∞–µ—Ç ID —á–∞—Ç–∞
			if m.text == '–î–∞–π ID':
				module.bot.send_message( m.chat.id, str( m.chat.id ) )
				continue

			checkRedirect_telegram( str( m.chat.id ), str( m.text ), getUserTName(m.from_user), None )

		elif m.content_type == 'sticker':

			if not ( config.getCell('vk_EnableStickers') ):
				return False

			filePath = module.bot.get_file( m.sticker.file_id ).file_path

			checkRedirect_telegram( str( m.chat.id ), str( m.text ), getUserTName(m.from_user), str( filePath ) )


def init_telegram():

	module.bot = telebot.TeleBot( config.getCell( 'telegram_token' ) )
	print( "Successfully loginned in telegram!")
	input_telegram()

def input_telegram():

	if ( config.getCell('telegram_useProxy') ):
		proxyType = str( config.getCell('p_type') )
		proxyUserInfo = str( config.getCell('p_user') + ':' + config.getCell('p_password') )
		proxyData = str( config.getCell('p_host') + ':' + config.getCell('p_port') )
		telebot.apihelper.proxy = { 
		'http': '%s://%s@%s' % ( proxyType, proxyUserInfo, proxyData ),
		'https': '%s://%s@%s' % ( proxyType, proxyUserInfo, proxyData )
		}

	module.bot.set_update_listener( listener )
	while True: # –ö–æ—Å—Ç—ã–ª—å –Ω–∞ —Å–ª—É—á–∞–π timeout'a
		try:
			module.bot.polling(none_stop=False)
		except:
			continue

#    ______               _       
#   |  ____|             | |      
#   | |____   _____ _ __ | |_ ___ 
#   |  __\ \ / / _ \ '_ \| __/ __|
#   | |___\ V /  __/ | | | |_\__ \
#   |______\_/ \___|_| |_|\__|___/
#
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
def checknewfriends():
	newfriends = module.vk.friends.getRequests( out=0, count=1, need_viewed=1 ) # –°–º–æ—Ç—Ä–∏–º, –µ—Å–ª–∏ –ª–∏ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
	if newfriends['count'] != 0:
		module.vk.friends.add( user_id= newfriends['items'] ) # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –≤ –¥—Ä—É–∑—å—è

#     _____ _   _      _                 
#    / ____| | (_)    | |                
#   | (___ | |_ _  ___| | _____ _ __ ___ 
#    \___ \| __| |/ __| |/ / _ \ '__/ __|
#    ____) | |_| | (__|   <  __/ |  \__ \
#   |_____/ \__|_|\___|_|\_\___|_|  |___/
#                                        
#                                        

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –í–ö
def addStickerIntoVK( path, sticker ):

	stickerList = []
	ourFile = path + sticker

	upload = vk_api.VkUpload( vk_session )
	photo = upload.photo( ourFile + ".png", album_id = config.getCell( 'vk_album_id' ) )

	if ( config.getCell('vk_detelestickers') ):
		os.remove( ourFile + ".png" )

	ourVK = 'photo{}_{}'.format( photo[0]['owner_id'], photo[0]['id'] )

	stickerList.append( { 'sticker_t':ourFile,
						  'sticker_vk':ourVK } )

	return stickerList

def saveSticker( stickerURL, attachment ):

	attachment = attachment.split('/')

	content = ur.urlopen( stickerURL ).read()

	path = attachment[0] + '/'
	if not os.path.exists( path ):
		os.makedirs( path )

	# –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ webp –≤ png

	imageWebp = path + attachment[1]

	out = open( imageWebp, 'wb' )
	out.write( content )
	out.close()

	img = Image.open(imageWebp)

	if ( config.getCell('vk_sticker_EnableScale') ):
		scale = config.getCell( 'vk_sticker_size' )
		img.thumbnail((scale, scale))
	img.save( imageWebp + ".png", "PNG")
	os.remove( imageWebp )

	#print( 'Sticker saved!' )

	stickers = addStickerIntoVK( path, attachment[1] )
	db.addStickerIntoDb( stickers )

# –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –Ω–∞ –∑–∞–º–µ—Ç–∫—É:
# Telegram —Ç–∞ –µ—â—ë –ø–æ–µ—Ö–∞–≤—à–∞—è –≤–µ—â—å, –∏–Ω–æ–≥–¥–∞ –∞—Ç—Ç–∞—á–º–µ–Ω—Ç—ã –∏–¥—É—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞, –∏–Ω–æ–≥–¥–∞ - –±–µ–∑ –Ω–µ–≥–æ
# –ò–∑-–∑–∞ —ç—Ç–æ–≥–æ —è –¥–æ–ª–≥–æ –Ω–µ –º–æ–≥ –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É –æ–¥–Ω–∏ —Å—Ç–∏–∫–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∞ –¥—Ä—É–≥–∏–µ - –≤—ã–¥–∞—é—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ

#    ______ _             _      
#   |  ____(_)           | |     
#   | |__   _ _ __   __ _| | ___ 
#   |  __| | | '_ \ / _` | |/ _ \
#   | |    | | | | | (_| | |  __/
#   |_|    |_|_| |_|\__,_|_|\___|
#                                
# –ü–∏—Ö–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø–æ—Ç–æ–∫–∏

t1 = threading.Thread( target=init_vk )
t2 = threading.Thread( target=init_telegram )

t1.start()
t2.start()
t1.join()
t2.join()
